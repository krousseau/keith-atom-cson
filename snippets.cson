# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
# 'Console log':
# 'prefix': 'log'
# 'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'.source.js':
  'React setState':
    'prefix': 'kr_ss'
    'body': """
    this.setState((state, props) => {
      return {
        $1
      };
    });
    """
  'React class skeleton':
    'prefix': 'kr_rc'
    'body': """
    import React, { Component } from 'react';
    import PropTypes from 'prop-types';

    export default class ${1:MyComponent} extends Component {
      render() {
        return (
        );
      }
    }
    """
  'React functional component':
    'prefix': 'kr_rfc'
    'body': """
    import React from 'react';
    import PropTypes from 'prop-types';

    const ${1:MyComponent} = ({
    $2
    }) => {
    return(
    );
    };

    export default ${1:MyComponent};
    """
  'React functional component (implicit)':
    'prefix': 'kr_rfci'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';

      const ${1:MyComponent} = ({
        $2
      }) => (
      );

      export default ${1:MyComponent};
    """
  'React HOC':
    'prefix': 'kr_hoc'
    'body': """
    import React, { Component, PropTypes } from "react";

    function ${1:MyHOC}(WrappedComponent) {
      return class ${2:HOC} extends Component {
        render() {
          return <WrappedComponent {...this.props} />;
        }
      };
    }
    """
  'Promisify':
    'prefix': 'kr_prom'
    'body': """
      return new Promise (
        function (resolve, reject) {
          $1
        });
    });
    """
